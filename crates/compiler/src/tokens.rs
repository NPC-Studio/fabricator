use fabricator_vm::Span;
use gc_arena::Collect;

#[derive(Debug, Copy, Clone, Collect)]
#[collect(no_drop)]
pub enum TokenKind<S> {
    EndOfStream,
    Newline,

    Macro,

    LeftParen,
    RightParen,
    LeftBracket,
    RightBracket,
    LeftBrace,
    RightBrace,

    Colon,
    SemiColon,
    Comma,

    Dot,

    Plus,
    Minus,
    Bang,
    Slash,
    Star,
    Percent,
    Ampersand,
    Pipe,
    Tilde,
    Caret,

    Div,
    Mod,

    And,
    Or,
    Xor,

    QuestionMark,
    Octothorpe,
    AtSign,
    Dollar,

    Equal,
    PlusEqual,
    MinusEqual,
    StarEqual,
    SlashEqual,
    PercentEqual,
    AmpersandEqual,
    PipeEqual,
    CaretEqual,
    DoubleQuestionMarkEqual,

    DoubleEqual,
    BangEqual,
    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    DoubleQuestionMark,

    DoublePlus,
    DoubleMinus,

    DoubleAmpersand,
    DoublePipe,
    DoubleCaret,

    DoubleLess,
    DoubleGreater,

    Enum,
    Function,
    Constructor,
    Var,
    Static,
    GlobalVar,

    Switch,
    Case,
    Default,
    Break,
    Continue,
    If,
    Else,
    For,
    Repeat,
    While,
    With,
    Return,
    Exit,
    Throw,
    Try,
    Catch,
    Finally,

    Undefined,
    True,
    False,

    Global,
    This,
    Other,
    New,

    Argument,
    ArgumentCount,

    Integer(S),
    /// Hex integer starting with `0x`.
    HexInteger(S),
    /// Hex integer starting with `$`.
    DollarHexInteger(S),
    Float(S),

    Identifier(S),
    String(S),
}

impl<S> TokenKind<S> {
    pub fn as_string_ref(&self) -> TokenKind<&S> {
        match self {
            TokenKind::EndOfStream => TokenKind::EndOfStream,
            TokenKind::Newline => TokenKind::Newline,
            TokenKind::Macro => TokenKind::Macro,
            TokenKind::LeftParen => TokenKind::LeftParen,
            TokenKind::RightParen => TokenKind::RightParen,
            TokenKind::LeftBracket => TokenKind::LeftBracket,
            TokenKind::RightBracket => TokenKind::RightBracket,
            TokenKind::LeftBrace => TokenKind::LeftBrace,
            TokenKind::RightBrace => TokenKind::RightBrace,
            TokenKind::Colon => TokenKind::Colon,
            TokenKind::SemiColon => TokenKind::SemiColon,
            TokenKind::Comma => TokenKind::Comma,
            TokenKind::Dot => TokenKind::Dot,
            TokenKind::Plus => TokenKind::Plus,
            TokenKind::Minus => TokenKind::Minus,
            TokenKind::Bang => TokenKind::Bang,
            TokenKind::Slash => TokenKind::Slash,
            TokenKind::Star => TokenKind::Star,
            TokenKind::Percent => TokenKind::Percent,
            TokenKind::Ampersand => TokenKind::Ampersand,
            TokenKind::Pipe => TokenKind::Pipe,
            TokenKind::Tilde => TokenKind::Tilde,
            TokenKind::Caret => TokenKind::Caret,
            TokenKind::Div => TokenKind::Div,
            TokenKind::Mod => TokenKind::Mod,
            TokenKind::And => TokenKind::And,
            TokenKind::Or => TokenKind::Or,
            TokenKind::Xor => TokenKind::Xor,
            TokenKind::QuestionMark => TokenKind::QuestionMark,
            TokenKind::Octothorpe => TokenKind::Octothorpe,
            TokenKind::AtSign => TokenKind::AtSign,
            TokenKind::Dollar => TokenKind::Dollar,
            TokenKind::Equal => TokenKind::Equal,
            TokenKind::PlusEqual => TokenKind::PlusEqual,
            TokenKind::MinusEqual => TokenKind::MinusEqual,
            TokenKind::StarEqual => TokenKind::StarEqual,
            TokenKind::SlashEqual => TokenKind::SlashEqual,
            TokenKind::PercentEqual => TokenKind::PercentEqual,
            TokenKind::AmpersandEqual => TokenKind::AmpersandEqual,
            TokenKind::CaretEqual => TokenKind::CaretEqual,
            TokenKind::PipeEqual => TokenKind::PipeEqual,
            TokenKind::DoubleQuestionMarkEqual => TokenKind::DoubleQuestionMarkEqual,
            TokenKind::DoubleEqual => TokenKind::DoubleEqual,
            TokenKind::BangEqual => TokenKind::BangEqual,
            TokenKind::Less => TokenKind::Less,
            TokenKind::LessEqual => TokenKind::LessEqual,
            TokenKind::Greater => TokenKind::Greater,
            TokenKind::GreaterEqual => TokenKind::GreaterEqual,
            TokenKind::DoubleQuestionMark => TokenKind::DoubleQuestionMark,
            TokenKind::DoublePlus => TokenKind::DoublePlus,
            TokenKind::DoubleMinus => TokenKind::DoubleMinus,
            TokenKind::DoubleAmpersand => TokenKind::DoubleAmpersand,
            TokenKind::DoublePipe => TokenKind::DoublePipe,
            TokenKind::DoubleCaret => TokenKind::DoubleCaret,
            TokenKind::DoubleLess => TokenKind::DoubleLess,
            TokenKind::DoubleGreater => TokenKind::DoubleGreater,
            TokenKind::Enum => TokenKind::Enum,
            TokenKind::Function => TokenKind::Function,
            TokenKind::Constructor => TokenKind::Constructor,
            TokenKind::Var => TokenKind::Var,
            TokenKind::Static => TokenKind::Static,
            TokenKind::GlobalVar => TokenKind::GlobalVar,
            TokenKind::Switch => TokenKind::Switch,
            TokenKind::Case => TokenKind::Case,
            TokenKind::Default => TokenKind::Default,
            TokenKind::Break => TokenKind::Break,
            TokenKind::Continue => TokenKind::Continue,
            TokenKind::If => TokenKind::If,
            TokenKind::Else => TokenKind::Else,
            TokenKind::For => TokenKind::For,
            TokenKind::Repeat => TokenKind::Repeat,
            TokenKind::While => TokenKind::While,
            TokenKind::With => TokenKind::With,
            TokenKind::Return => TokenKind::Return,
            TokenKind::Exit => TokenKind::Exit,
            TokenKind::Throw => TokenKind::Throw,
            TokenKind::Try => TokenKind::Try,
            TokenKind::Catch => TokenKind::Catch,
            TokenKind::Finally => TokenKind::Finally,
            TokenKind::Undefined => TokenKind::Undefined,
            TokenKind::True => TokenKind::True,
            TokenKind::False => TokenKind::False,
            TokenKind::Global => TokenKind::Global,
            TokenKind::This => TokenKind::This,
            TokenKind::Other => TokenKind::Other,
            TokenKind::New => TokenKind::New,
            TokenKind::Argument => TokenKind::Argument,
            TokenKind::ArgumentCount => TokenKind::ArgumentCount,
            TokenKind::Integer(i) => TokenKind::Integer(i),
            TokenKind::HexInteger(i) => TokenKind::HexInteger(i),
            TokenKind::DollarHexInteger(i) => TokenKind::DollarHexInteger(i),
            TokenKind::Float(f) => TokenKind::Float(f),
            TokenKind::Identifier(i) => TokenKind::Identifier(i),
            TokenKind::String(s) => TokenKind::String(s),
        }
    }

    pub fn map_string<S2>(self, map: impl Fn(S) -> S2) -> TokenKind<S2> {
        match self {
            TokenKind::EndOfStream => TokenKind::EndOfStream,
            TokenKind::Newline => TokenKind::Newline,
            TokenKind::Macro => TokenKind::Macro,
            TokenKind::LeftParen => TokenKind::LeftParen,
            TokenKind::RightParen => TokenKind::RightParen,
            TokenKind::LeftBracket => TokenKind::LeftBracket,
            TokenKind::RightBracket => TokenKind::RightBracket,
            TokenKind::LeftBrace => TokenKind::LeftBrace,
            TokenKind::RightBrace => TokenKind::RightBrace,
            TokenKind::Colon => TokenKind::Colon,
            TokenKind::SemiColon => TokenKind::SemiColon,
            TokenKind::Comma => TokenKind::Comma,
            TokenKind::Dot => TokenKind::Dot,
            TokenKind::Plus => TokenKind::Plus,
            TokenKind::Minus => TokenKind::Minus,
            TokenKind::Bang => TokenKind::Bang,
            TokenKind::Slash => TokenKind::Slash,
            TokenKind::Star => TokenKind::Star,
            TokenKind::Percent => TokenKind::Percent,
            TokenKind::Ampersand => TokenKind::Ampersand,
            TokenKind::Pipe => TokenKind::Pipe,
            TokenKind::Tilde => TokenKind::Tilde,
            TokenKind::Caret => TokenKind::Caret,
            TokenKind::Div => TokenKind::Div,
            TokenKind::Mod => TokenKind::Mod,
            TokenKind::And => TokenKind::And,
            TokenKind::Or => TokenKind::Or,
            TokenKind::Xor => TokenKind::Xor,
            TokenKind::QuestionMark => TokenKind::QuestionMark,
            TokenKind::Octothorpe => TokenKind::Octothorpe,
            TokenKind::AtSign => TokenKind::AtSign,
            TokenKind::Dollar => TokenKind::Dollar,
            TokenKind::Equal => TokenKind::Equal,
            TokenKind::PlusEqual => TokenKind::PlusEqual,
            TokenKind::MinusEqual => TokenKind::MinusEqual,
            TokenKind::StarEqual => TokenKind::StarEqual,
            TokenKind::SlashEqual => TokenKind::SlashEqual,
            TokenKind::PercentEqual => TokenKind::PercentEqual,
            TokenKind::AmpersandEqual => TokenKind::AmpersandEqual,
            TokenKind::CaretEqual => TokenKind::CaretEqual,
            TokenKind::PipeEqual => TokenKind::PipeEqual,
            TokenKind::DoubleQuestionMarkEqual => TokenKind::DoubleQuestionMarkEqual,
            TokenKind::DoubleEqual => TokenKind::DoubleEqual,
            TokenKind::BangEqual => TokenKind::BangEqual,
            TokenKind::Less => TokenKind::Less,
            TokenKind::LessEqual => TokenKind::LessEqual,
            TokenKind::Greater => TokenKind::Greater,
            TokenKind::GreaterEqual => TokenKind::GreaterEqual,
            TokenKind::DoubleQuestionMark => TokenKind::DoubleQuestionMark,
            TokenKind::DoublePlus => TokenKind::DoublePlus,
            TokenKind::DoubleMinus => TokenKind::DoubleMinus,
            TokenKind::DoubleAmpersand => TokenKind::DoubleAmpersand,
            TokenKind::DoublePipe => TokenKind::DoublePipe,
            TokenKind::DoubleCaret => TokenKind::DoubleCaret,
            TokenKind::DoubleLess => TokenKind::DoubleLess,
            TokenKind::DoubleGreater => TokenKind::DoubleGreater,
            TokenKind::Enum => TokenKind::Enum,
            TokenKind::Function => TokenKind::Function,
            TokenKind::Constructor => TokenKind::Constructor,
            TokenKind::Var => TokenKind::Var,
            TokenKind::Static => TokenKind::Static,
            TokenKind::GlobalVar => TokenKind::GlobalVar,
            TokenKind::Switch => TokenKind::Switch,
            TokenKind::Case => TokenKind::Case,
            TokenKind::Default => TokenKind::Default,
            TokenKind::Break => TokenKind::Break,
            TokenKind::Continue => TokenKind::Continue,
            TokenKind::If => TokenKind::If,
            TokenKind::Else => TokenKind::Else,
            TokenKind::For => TokenKind::For,
            TokenKind::Repeat => TokenKind::Repeat,
            TokenKind::While => TokenKind::While,
            TokenKind::With => TokenKind::With,
            TokenKind::Return => TokenKind::Return,
            TokenKind::Exit => TokenKind::Exit,
            TokenKind::Throw => TokenKind::Throw,
            TokenKind::Try => TokenKind::Try,
            TokenKind::Catch => TokenKind::Catch,
            TokenKind::Finally => TokenKind::Finally,
            TokenKind::Undefined => TokenKind::Undefined,
            TokenKind::True => TokenKind::True,
            TokenKind::False => TokenKind::False,
            TokenKind::Global => TokenKind::Global,
            TokenKind::This => TokenKind::This,
            TokenKind::Other => TokenKind::Other,
            TokenKind::New => TokenKind::New,
            TokenKind::Argument => TokenKind::Argument,
            TokenKind::ArgumentCount => TokenKind::ArgumentCount,
            TokenKind::Integer(i) => TokenKind::Integer(map(i)),
            TokenKind::HexInteger(i) => TokenKind::HexInteger(map(i)),
            TokenKind::DollarHexInteger(i) => TokenKind::DollarHexInteger(map(i)),
            TokenKind::Float(f) => TokenKind::Float(map(f)),
            TokenKind::Identifier(i) => TokenKind::Identifier(map(i)),
            TokenKind::String(s) => TokenKind::String(map(s)),
        }
    }

    pub fn as_unit_string(&self) -> TokenKind<()> {
        self.as_string_ref().map_string(|_| ())
    }
}

impl<R, S: PartialEq<R>> PartialEq<TokenKind<R>> for TokenKind<S> {
    fn eq(&self, other: &TokenKind<R>) -> bool {
        match (self, other) {
            (TokenKind::EndOfStream, TokenKind::EndOfStream) => true,
            (TokenKind::EndOfStream, _) => false,
            (TokenKind::Newline, TokenKind::Newline) => true,
            (TokenKind::Newline, _) => false,
            (TokenKind::Macro, TokenKind::Macro) => true,
            (TokenKind::Macro, _) => false,
            (TokenKind::LeftParen, TokenKind::LeftParen) => true,
            (TokenKind::LeftParen, _) => false,
            (TokenKind::RightParen, TokenKind::RightParen) => true,
            (TokenKind::RightParen, _) => false,
            (TokenKind::LeftBracket, TokenKind::LeftBracket) => true,
            (TokenKind::LeftBracket, _) => false,
            (TokenKind::RightBracket, TokenKind::RightBracket) => true,
            (TokenKind::RightBracket, _) => false,
            (TokenKind::LeftBrace, TokenKind::LeftBrace) => true,
            (TokenKind::LeftBrace, _) => false,
            (TokenKind::RightBrace, TokenKind::RightBrace) => true,
            (TokenKind::RightBrace, _) => false,
            (TokenKind::Colon, TokenKind::Colon) => true,
            (TokenKind::Colon, _) => false,
            (TokenKind::SemiColon, TokenKind::SemiColon) => true,
            (TokenKind::SemiColon, _) => false,
            (TokenKind::Comma, TokenKind::Comma) => true,
            (TokenKind::Comma, _) => false,
            (TokenKind::Dot, TokenKind::Dot) => true,
            (TokenKind::Dot, _) => false,
            (TokenKind::Plus, TokenKind::Plus) => true,
            (TokenKind::Plus, _) => false,
            (TokenKind::Minus, TokenKind::Minus) => true,
            (TokenKind::Minus, _) => false,
            (TokenKind::Bang, TokenKind::Bang) => true,
            (TokenKind::Bang, _) => false,
            (TokenKind::Slash, TokenKind::Slash) => true,
            (TokenKind::Slash, _) => false,
            (TokenKind::Star, TokenKind::Star) => true,
            (TokenKind::Star, _) => false,
            (TokenKind::Percent, TokenKind::Percent) => true,
            (TokenKind::Percent, _) => false,
            (TokenKind::Ampersand, TokenKind::Ampersand) => true,
            (TokenKind::Ampersand, _) => false,
            (TokenKind::Pipe, TokenKind::Pipe) => true,
            (TokenKind::Pipe, _) => false,
            (TokenKind::Tilde, TokenKind::Tilde) => true,
            (TokenKind::Tilde, _) => false,
            (TokenKind::Caret, TokenKind::Caret) => true,
            (TokenKind::Caret, _) => false,
            (TokenKind::Div, TokenKind::Div) => true,
            (TokenKind::Div, _) => false,
            (TokenKind::Mod, TokenKind::Mod) => true,
            (TokenKind::Mod, _) => false,
            (TokenKind::And, TokenKind::And) => true,
            (TokenKind::And, _) => false,
            (TokenKind::Or, TokenKind::Or) => true,
            (TokenKind::Or, _) => false,
            (TokenKind::Xor, TokenKind::Xor) => true,
            (TokenKind::Xor, _) => false,
            (TokenKind::QuestionMark, TokenKind::QuestionMark) => true,
            (TokenKind::QuestionMark, _) => false,
            (TokenKind::Octothorpe, TokenKind::Octothorpe) => true,
            (TokenKind::Octothorpe, _) => false,
            (TokenKind::AtSign, TokenKind::AtSign) => true,
            (TokenKind::AtSign, _) => false,
            (TokenKind::Dollar, TokenKind::Dollar) => true,
            (TokenKind::Dollar, _) => false,
            (TokenKind::Equal, TokenKind::Equal) => true,
            (TokenKind::Equal, _) => false,
            (TokenKind::PlusEqual, TokenKind::PlusEqual) => true,
            (TokenKind::PlusEqual, _) => false,
            (TokenKind::MinusEqual, TokenKind::MinusEqual) => true,
            (TokenKind::MinusEqual, _) => false,
            (TokenKind::StarEqual, TokenKind::StarEqual) => true,
            (TokenKind::StarEqual, _) => false,
            (TokenKind::SlashEqual, TokenKind::SlashEqual) => true,
            (TokenKind::SlashEqual, _) => false,
            (TokenKind::PercentEqual, TokenKind::PercentEqual) => true,
            (TokenKind::PercentEqual, _) => false,
            (TokenKind::AmpersandEqual, TokenKind::AmpersandEqual) => true,
            (TokenKind::AmpersandEqual, _) => false,
            (TokenKind::CaretEqual, TokenKind::CaretEqual) => true,
            (TokenKind::CaretEqual, _) => false,
            (TokenKind::PipeEqual, TokenKind::PipeEqual) => true,
            (TokenKind::PipeEqual, _) => false,
            (TokenKind::DoubleQuestionMarkEqual, TokenKind::DoubleQuestionMarkEqual) => true,
            (TokenKind::DoubleQuestionMarkEqual, _) => false,
            (TokenKind::DoubleEqual, TokenKind::DoubleEqual) => true,
            (TokenKind::DoubleEqual, _) => false,
            (TokenKind::BangEqual, TokenKind::BangEqual) => true,
            (TokenKind::BangEqual, _) => false,
            (TokenKind::Less, TokenKind::Less) => true,
            (TokenKind::Less, _) => false,
            (TokenKind::LessEqual, TokenKind::LessEqual) => true,
            (TokenKind::LessEqual, _) => false,
            (TokenKind::Greater, TokenKind::Greater) => true,
            (TokenKind::Greater, _) => false,
            (TokenKind::GreaterEqual, TokenKind::GreaterEqual) => true,
            (TokenKind::GreaterEqual, _) => false,
            (TokenKind::DoubleQuestionMark, TokenKind::DoubleQuestionMark) => true,
            (TokenKind::DoubleQuestionMark, _) => false,
            (TokenKind::DoublePlus, TokenKind::DoublePlus) => true,
            (TokenKind::DoublePlus, _) => false,
            (TokenKind::DoubleMinus, TokenKind::DoubleMinus) => true,
            (TokenKind::DoubleMinus, _) => false,
            (TokenKind::DoubleAmpersand, TokenKind::DoubleAmpersand) => true,
            (TokenKind::DoubleAmpersand, _) => false,
            (TokenKind::DoublePipe, TokenKind::DoublePipe) => true,
            (TokenKind::DoublePipe, _) => false,
            (TokenKind::DoubleCaret, TokenKind::DoubleCaret) => true,
            (TokenKind::DoubleCaret, _) => false,
            (TokenKind::DoubleLess, TokenKind::DoubleLess) => true,
            (TokenKind::DoubleLess, _) => false,
            (TokenKind::DoubleGreater, TokenKind::DoubleGreater) => true,
            (TokenKind::DoubleGreater, _) => false,
            (TokenKind::Enum, TokenKind::Enum) => true,
            (TokenKind::Enum, _) => false,
            (TokenKind::Function, TokenKind::Function) => true,
            (TokenKind::Function, _) => false,
            (TokenKind::Constructor, TokenKind::Constructor) => true,
            (TokenKind::Constructor, _) => false,
            (TokenKind::Var, TokenKind::Var) => true,
            (TokenKind::Var, _) => false,
            (TokenKind::Static, TokenKind::Static) => true,
            (TokenKind::Static, _) => false,
            (TokenKind::GlobalVar, TokenKind::GlobalVar) => true,
            (TokenKind::GlobalVar, _) => false,
            (TokenKind::Switch, TokenKind::Switch) => true,
            (TokenKind::Switch, _) => false,
            (TokenKind::Case, TokenKind::Case) => true,
            (TokenKind::Case, _) => false,
            (TokenKind::Default, TokenKind::Default) => true,
            (TokenKind::Default, _) => false,
            (TokenKind::Break, TokenKind::Break) => true,
            (TokenKind::Break, _) => false,
            (TokenKind::Continue, TokenKind::Continue) => true,
            (TokenKind::Continue, _) => false,
            (TokenKind::If, TokenKind::If) => true,
            (TokenKind::If, _) => false,
            (TokenKind::Else, TokenKind::Else) => true,
            (TokenKind::Else, _) => false,
            (TokenKind::For, TokenKind::For) => true,
            (TokenKind::For, _) => false,
            (TokenKind::Repeat, TokenKind::Repeat) => true,
            (TokenKind::Repeat, _) => false,
            (TokenKind::While, TokenKind::While) => true,
            (TokenKind::While, _) => false,
            (TokenKind::With, TokenKind::With) => true,
            (TokenKind::With, _) => false,
            (TokenKind::Return, TokenKind::Return) => true,
            (TokenKind::Return, _) => false,
            (TokenKind::Exit, TokenKind::Exit) => true,
            (TokenKind::Exit, _) => false,
            (TokenKind::Throw, TokenKind::Throw) => true,
            (TokenKind::Throw, _) => false,
            (TokenKind::Try, TokenKind::Try) => true,
            (TokenKind::Try, _) => false,
            (TokenKind::Catch, TokenKind::Catch) => true,
            (TokenKind::Catch, _) => false,
            (TokenKind::Finally, TokenKind::Finally) => true,
            (TokenKind::Finally, _) => false,
            (TokenKind::Undefined, TokenKind::Undefined) => true,
            (TokenKind::Undefined, _) => false,
            (TokenKind::True, TokenKind::True) => true,
            (TokenKind::True, _) => false,
            (TokenKind::False, TokenKind::False) => true,
            (TokenKind::False, _) => false,
            (TokenKind::Global, TokenKind::Global) => true,
            (TokenKind::Global, _) => false,
            (TokenKind::This, TokenKind::This) => true,
            (TokenKind::This, _) => false,
            (TokenKind::Other, TokenKind::Other) => true,
            (TokenKind::Other, _) => false,
            (TokenKind::New, TokenKind::New) => true,
            (TokenKind::New, _) => false,
            (TokenKind::Argument, TokenKind::Argument) => true,
            (TokenKind::Argument, _) => false,
            (TokenKind::ArgumentCount, TokenKind::ArgumentCount) => true,
            (TokenKind::ArgumentCount, _) => false,
            (TokenKind::Integer(a), TokenKind::Integer(b)) => a == b,
            (TokenKind::Integer(_), _) => false,
            (TokenKind::HexInteger(a), TokenKind::HexInteger(b)) => a == b,
            (TokenKind::HexInteger(_), _) => false,
            (TokenKind::DollarHexInteger(a), TokenKind::DollarHexInteger(b)) => a == b,
            (TokenKind::DollarHexInteger(_), _) => false,
            (TokenKind::Float(a), TokenKind::Float(b)) => a == b,
            (TokenKind::Float(_), _) => false,
            (TokenKind::Identifier(a), TokenKind::Identifier(b)) => a == b,
            (TokenKind::Identifier(_), _) => false,
            (TokenKind::String(a), TokenKind::String(b)) => a == b,
            (TokenKind::String(_), _) => false,
        }
    }
}

impl<S: Eq> Eq for TokenKind<S> {}

#[derive(Debug, Copy, Clone, Collect)]
#[collect(no_drop)]
pub struct Token<S> {
    pub kind: TokenKind<S>,
    pub span: Span,
}
