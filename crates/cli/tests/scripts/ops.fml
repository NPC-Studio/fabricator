assert(true && true);
assert(!(true && false));
assert(true || false);

assert(1 > 0);
assert(0 < 1);
assert(!(1 < 0));
assert(!(0 > 1));
assert(0 <= 1);
assert(1 <= 1);
assert(!(1 <= 0));
assert(1 >= 0);
assert(1 >= 1);
assert(!(0 >= 1));

assert(3 * 3 == 9);
assert(3 / 3 == 1);
assert(3 + 3 == 6);
assert(3 - 3 == 0);

assert(true == 1);
assert(true == 1.0);
assert(true != 0.5);
assert(false == 0.0);
assert(false < 1.0);
assert(true > 0.5);

assert(2 % 3 == 2);
assert(4 mod 3 == 1);
assert(4.9 div 3.1 == 1);

{
	var i = 0;
	assert(++i == 1);
	assert(i++ == 1);
	assert(i == 2);
	assert(i-- == 2);
	assert(--i == 0);
}

assert(undefined ?? 3 == 3);
assert(4 ?? 3 == 4);

assert((1 | 2) == 3);
assert((1 & 2) == 0);
assert((3 ^ 2) == 1);
assert((2 << 2) == 8);
assert((8 >> 2) == 2);
assert(~-1 == 0);

{
	var i = 0;
	i |= 3;
	assert(i == 3);
	i ^= 5;
	assert(i == 6);
	i &= 4;
	assert(i == 4);
}

assert(black_box(true) && true);
assert(!(black_box(true) && false));
assert(black_box(true) || false);

assert(black_box(1) > 0);
assert(black_box(0) < 1);
assert(!(black_box(1) < 0));
assert(!(black_box(0) > 1));
assert(black_box(0) <= 1);
assert(black_box(1) <= 1);
assert(!(black_box(1) <= 0));
assert(black_box(1) >= 0);
assert(black_box(1) >= 1);
assert(!(black_box(0) >= 1));

assert(black_box(3) * 3 == 9);
assert(black_box(3) / 3 == 1);
assert(black_box(3) + 3 == 6);
assert(black_box(3) - 3 == 0);

assert(black_box(true) == 1);
assert(black_box(true) == 1.0);
assert(black_box(true) != 0.5);
assert(black_box(false) == 0.0);
assert(black_box(false) < 1.0);
assert(black_box(true) > 0.5);

assert(black_box(2) % 3 == 2);
assert(black_box(4) mod 3 == 1);
assert(black_box(4.9) div 3.1 == 1);

{
	var i = black_box(0);
	assert(++i == 1);
	assert(i++ == 1);
	assert(i == 2);
	assert(i-- == 2);
	assert(--i == 0);
}

assert(undefined ?? black_box(3) == 3);
assert(4 ?? black_box(3) == 4);

assert((black_box(1) | 2) == 3);
assert((black_box(1) & 2) == 0);
assert((black_box(3) ^ 2) == 1);
assert((black_box(2) << 2) == 8);
assert((black_box(8) >> 2) == 2);
assert(~black_box(-1) == 0);

{
	var i = black_box(0);
	i |= 3;
	assert(i == 3);
	i ^= 5;
	assert(i == 6);
	i &= 4;
	assert(i == 4);
}

return true;
